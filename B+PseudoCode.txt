final private static int MAX_CHILD = 5;
final private static int MAX_KEYS = MAX_CHILD - 1;
final private static int HALF_MAX_CHILD = ((MAX_CHILD + 1) / 2);
B+tree tree = new B+tree;

int Iskeyexist(String k){ //　ノードにキーkがあるときはそのインデックス、ないときは-1を返す
    for(int i = 0; i < this.nkeys; i++){
        if(this.keys[i] == k){
            return i;
        }
    }
    return -1;
}

int keyindex(String k){ //　kが入るべきindexを返す
    int i;
    for(i = 0; i < this.nkeys; i++){
        int cmp = k.compareTo(this.keys[i]); 
        if(cmp < 0){
            break;
        } // k < keys[i]
    }
    return i;
}

// 検索
Object get(key k){
    node target t = tree.root;
    while(tが内部ノード){
        int i = t.keyindex(k);
        t = t.child[i];
    }
    // tが葉ノード
    for(int i = 0; i < nkeys; i++){
        if(t.keys[i] == k){
            return t.data[i];
        }
    }
    return null;
}

// 挿入
void insert(key k, Object value){
    node t = tree.root;
    while(tが内部ノード){
        int i = t.keyindex(k);
        t = t.child[i];
    }
    // tはkが入るべき葉ノード
    int ki = t.Iskeyexist(k)
    if (ki >= 0){ // key kがもうある場合
        t.data[ki] = value; // 値の書き換え
    }
    else{ // key kがまだない場合
        int i;
        for(i = t.nkeys; i > 0; i--){ // iはnkeysから1まで
            int cmp = k.compareTo(t.keys[i-1]);
            if(cmp < 0){ // k < keys[i-1]
                t.keys[i] = t.keys[i-1]; // 右にずらす
                t.data[i] = t.data[i-1];
            } 
            else{ // k > keys[i-1]
                t.keys[i] = k;
                t.data[i] = x;
                t.nkeys++; // 空いたところに挿入
                break;
            }
        }
        if(i == 0){ // k < keys[0]
            t.keys[0] = k; // 左端に挿入
            t.data[0] = x;
            t.nkeys++;
        }
    }
    if(t.nkeys == MAX_CHILD){ // ノードが溢れるとき
        t.split(); // 分割
    }
    
}

LeafNodeでの分割
leaf_split(){
    LeafNode l = this;
    LeafNode r = new LeafNode;
    // lとrでkeyとdataを分配
    for (int i = j; i < MAX_CHILD; i++){
        r.keys[i-j] = l.keys[i];
        l.keys[i] = null;
        r.data[i-j] = l.data[i];
        l.data[i] = null;
    }
    
    if(this == root){
        
    }
    else{
        this.parent.interior_insert(r.keys[0])
    }
}

interior_insert(key k){
    int i;
    for(i = this.nkeys; i > 0; i--){ // iはnkeysから1まで
        int cmp = k.compareTo(t.keys[i-1]);
        if(cmp < 0){ // k < keys[i-1]
            this.keys[i] = this.keys[i-1]; // 右にずらす
            this.data[i] = this.data[i-1];
        } 
        else{ // k > keys[i-1]
            this.keys[i] = k;
            this.data[i] = x;
            this.nkeys++; // 空いたところに挿入
            break;
        }
    }
    if(i == 0){ // k < keys[0]
        this.keys[0] = k; // 左端に挿入
        this.data[0] = x;
        this.nkeys++;
    }
    if (this.nkeys == MAX_KEYS){ // ノードが溢れたとき
        this.interior_split; // 分割
    }
}

interior_split(){
    InteriorNode l = this;
    InteriorNode r = new InteriorNode;
    int ki = this.keyindex(k);
    int j = HALF_MAX_CHILD - 1;
    // lとrでkeyとchildを分配
    for (int i = j; i < MAX_CHILD; i++){
        r.keys[i-j] = l.keys[i];
        l.keys[i] = null;
        r.data[i-j] = l.data[i];
        l.data[i] = null;
    }

    if(this == root){
        中間ノードを作ってそれをrootにする
    }
    else{
        this.parent.interior_insert(j)
    }
}

void insert(String k, Object v){ // tree
    node t = tree.root;
    t.insert(k, v)

insert()